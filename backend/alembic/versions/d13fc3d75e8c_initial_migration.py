# -*- coding: utf-8 -*-
"""initial migration

Revision ID: d13fc3d75e8c
Revises:
Create Date: 2018-06-21 16:13:48.565355

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "d13fc3d75e8c"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "matches",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.UnicodeText(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_matches")),
        sa.UniqueConstraint("code", name=op.f("uq_matches_code")),
    )
    op.create_table(
        "tricks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "completed", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column("current_sequence", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tricks")),
    )
    op.create_table(
        "players",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("match_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.UnicodeText(), nullable=False),
        sa.Column("sequence", sa.Integer(), nullable=False),
        sa.Column(
            "is_match_maker",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "sequence >= 1", name=op.f("ck_players_player_sequence_valid_ck")
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["matches.id"],
            name=op.f("fk_players_match_id_matches"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_players")),
        sa.UniqueConstraint("match_id", "name", name="player_match_id_name_unique"),
        sa.UniqueConstraint("match_id", "sequence", name="player_match_id_seq_unique"),
    )
    op.create_table(
        "rounds",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("match_id", sa.Integer(), nullable=False),
        sa.Column("sequence", sa.Integer(), nullable=False),
        sa.Column("first_player_sequence", sa.Integer(), nullable=True),
        sa.Column("discard", sa.UnicodeText(), nullable=True),
        sa.Column("trump", sa.UnicodeText(), nullable=True),
        sa.Column("super_trump", sa.UnicodeText(), nullable=True),
        sa.Column("points", sa.Integer(), nullable=True),
        sa.Column("double_player_sequence", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "discard = ANY(ARRAY['ONE_CARD', 'TWO_CARDS', 'ONE_EXCEPT_ONE', 'PASS_LEFT', 'NONE'])",
            name=op.f("ck_rounds_round_discard_valid_ck"),
        ),
        sa.CheckConstraint(
            "super_trump = ANY(ARRAY['R', 'G', 'B', 'Y', 'NONE'])",
            name=op.f("ck_rounds_round_super_trump_valid_ck"),
        ),
        sa.CheckConstraint(
            "trump = ANY(ARRAY['R', 'G', 'B', 'Y'])",
            name=op.f("ck_rounds_round_trump_valid_ck"),
        ),
        sa.CheckConstraint(
            "points = ANY(ARRAY[1, 2, 3, 4, -2])",
            name=op.f("ck_rounds_round_points_valid_ck"),
        ),
        sa.CheckConstraint(
            "sequence >= 1", name=op.f("ck_rounds_round_sequence_valid_ck")
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["matches.id"],
            name=op.f("fk_rounds_match_id_matches"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_rounds")),
        sa.UniqueConstraint(
            "match_id", "sequence", name="round_match_id_sequence_unique"
        ),
    )
    op.create_table(
        "cards",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column(
            "in_hand", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.Column("color", sa.UnicodeText(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "color = ANY(ARRAY['R', 'G', 'B', 'Y'])",
            name=op.f("ck_cards_card_color_rgby_ck"),
        ),
        sa.CheckConstraint(
            "value >= 1 AND value <= 13", name=op.f("ck_cards_card_value_valid_ck")
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["players.id"],
            name=op.f("fk_cards_player_id_players"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_cards")),
    )
    op.create_table(
        "player_teams",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("sequence", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "sequence IN (1, 2)", name=op.f("ck_player_teams_playerteam_valid_sequence")
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["players.id"],
            name=op.f("fk_player_teams_player_id_players"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.id"],
            name=op.f("fk_player_teams_round_id_rounds"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_player_teams")),
    )
    op.create_table(
        "round_rules_selections",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("round_id", sa.Integer(), nullable=False),
        sa.Column("current_selector_sequence", sa.Integer(), nullable=False),
        sa.Column(
            "first_player_choices", postgresql.ARRAY(sa.Integer()), nullable=False
        ),
        sa.Column(
            "discard_choices", postgresql.ARRAY(sa.UnicodeText()), nullable=False
        ),
        sa.Column(
            "trump_choices",
            postgresql.ARRAY(sa.UnicodeText()),
            server_default=sa.text("ARRAY['R', 'G', 'B', 'Y']"),
            nullable=False,
        ),
        sa.Column(
            "super_trump_choices",
            postgresql.ARRAY(sa.UnicodeText()),
            server_default=sa.text("ARRAY['R', 'G', 'B', 'Y', 'NONE']"),
            nullable=False,
        ),
        sa.Column("points_choices", postgresql.ARRAY(sa.Integer()), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "discard_choices @> ARRAY['ONE_CARD', 'TWO_CARDS', 'ONE_EXCEPT_ONE', 'PASS_LEFT', 'NONE']",
            name=op.f("ck_round_rules_selections_round_rules_discard_choices_ck"),
        ),
        sa.CheckConstraint(
            "super_trump_choices @> ARRAY['R', 'G', 'B', 'Y', 'NONE']",
            name=op.f("ck_round_rules_selections_round_rules_super_trump_choices_ck"),
        ),
        sa.CheckConstraint(
            "trump_choices @> ARRAY['R', 'G', 'B', 'Y']",
            name=op.f("ck_round_rules_selections_round_rules_trump_choices_ck"),
        ),
        sa.CheckConstraint(
            "current_selector_sequence >= 1",
            name=op.f(
                "ck_round_rules_selections_round_rules_selection_selector_sequence_ck"
            ),
        ),
        sa.CheckConstraint(
            "points_choices @> ARRAY[1, 2, 3, 4, -2]",
            name=op.f("ck_round_rules_selections_round_rules__super_trump_choices_ck"),
        ),
        sa.ForeignKeyConstraint(
            ["round_id"],
            ["rounds.id"],
            name=op.f("fk_round_rules_selections_round_id_rounds"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_round_rules_selections")),
    )
    op.create_table(
        "trick_cards",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "completed", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column("card_id", sa.Integer(), nullable=False),
        sa.Column("trick_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["card_id"],
            ["cards.id"],
            name=op.f("fk_trick_cards_card_id_cards"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.ForeignKeyConstraint(
            ["trick_id"],
            ["tricks.id"],
            name=op.f("fk_trick_cards_trick_id_tricks"),
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_trick_cards")),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("trick_cards")
    op.drop_table("round_rules_selections")
    op.drop_table("player_teams")
    op.drop_table("cards")
    op.drop_table("rounds")
    op.drop_table("players")
    op.drop_table("tricks")
    op.drop_table("matches")
    # ### end Alembic commands ###
